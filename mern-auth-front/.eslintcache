[{"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\index.js":"1","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\App.js":"2","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\Home.js":"3","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\Login.js":"4","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\Register.js":"5","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\layout\\Header.js":"6","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\AuthOptions.js":"7","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\context\\UserContext.js":"8","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\ErrorNotice.js":"9","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\OntRegister.js":"10","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\testing.js":"11","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\AuthDelete.js":"12","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\FileUpload.js":"13","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\ScrollButton.js":"14","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\GuestDashboard.js":"15"},{"size":318,"mtime":1606555287192,"results":"16","hashOfConfig":"17"},{"size":3026,"mtime":1618469755220,"results":"18","hashOfConfig":"17"},{"size":16594,"mtime":1610034357487,"results":"19","hashOfConfig":"17"},{"size":2457,"mtime":1618469869958,"results":"20","hashOfConfig":"17"},{"size":4048,"mtime":1618497859140,"results":"21","hashOfConfig":"17"},{"size":1434,"mtime":1618499365686,"results":"22","hashOfConfig":"17"},{"size":1665,"mtime":1610215147049,"results":"23","hashOfConfig":"17"},{"size":75,"mtime":1606569424554,"results":"24","hashOfConfig":"17"},{"size":387,"mtime":1609348578351,"results":"25","hashOfConfig":"17"},{"size":2644,"mtime":1616766795952,"results":"26","hashOfConfig":"17"},{"size":33703,"mtime":1618560364272,"results":"27","hashOfConfig":"17"},{"size":195,"mtime":1608656598727,"results":"28","hashOfConfig":"17"},{"size":2019,"mtime":1616782781601,"results":"29","hashOfConfig":"17"},{"size":992,"mtime":1618388224524,"results":"30","hashOfConfig":"17"},{"size":22689,"mtime":1618557013365,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ufsblf",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\index.js",[],["70","71"],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\App.js",["72"],"import React, {useState, useEffect} from \"react\";\r\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";   //enables routing,anything inside this will have access to the browser routing\r\n//we only have 1 index.html, so to transsition between diferent pages we need react-router-dom\r\n//switch, we look at the URL and make a decision about it\r\n///Route, determines a single route\r\nimport Axios from \"axios\";\r\nimport Home from \"./components/pages/Home\"; //import the components' file\r\nimport Login from \"./components/auth/Login\";\r\nimport Register from \"./components/auth/Register\";\r\nimport Header from \"./components/layout/Header\";\r\nimport UserContext from \"./context/UserContext\";\r\nimport OntRegister from \"./components/pages/OntRegister\";\r\nimport AuthDelete from \"./components/auth/AuthDelete\";\r\nimport Testing from \"./components/pages/testing\";\r\nimport GuestDashboard from \"./components/pages/GuestDashboard\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport default function App() { //this app react function component(rfc) returns a div App\r\n    const [userData, setUserData] = useState({\r\n        token: undefined,\r\n        user: undefined,\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        const checkLoggedIn = async () => {\r\n            let token = localStorage.getItem(\"auth-token\"); //get token from local storage(if any)\r\n            if(token === null){\r\n                localStorage.setItem(\"auth-token\", \"\");\r\n                token = \"\";\r\n            }\r\n            \r\n            const tokenRes = await Axios.post( //token auth with backend using axios\r\n                \"http://localhost:5000/users/tokenIsValid\",\r\n                null,\r\n                {headers: {\"x-auth-token\": token}}\r\n            );\r\n            if(tokenRes.data) {\r\n                const userRes = await Axios.get(\"http://localhost:5000/users/\",{ //get user data from backend using axios\r\n                    headers:{\"x-auth-token\": token},\r\n                });\r\n                setUserData({token, user: userRes.data}); //update state with data we found from axios backend get request\r\n\r\n            }\r\n\r\n        };\r\n\r\n        checkLoggedIn();\r\n    }, []);\r\n    return (\r\n    <> \r\n        <BrowserRouter> \r\n        <UserContext.Provider value={{userData, setUserData}}> {/*this provides the value given to every component it surrounds */}\r\n        <Header/> {/*this will be stuck in all our \"pages\" so no routing or switching required */}\r\n           <div className=\"container\">\r\n           <Switch>\r\n               <Route exact path=\"/\" component={Testing} />\r\n               <Route exact path=\"/user-dash\" component={GuestDashboard} /> \r\n               <Route path=\"/login\" component={Login} />\r\n               <Route path=\"/register\" component={Register} />\r\n               <Route path=\"/ontregister\" component={OntRegister}/>\r\n               <Route path=\"/ontdelete\" component={AuthDelete}/>\r\n            </Switch>\r\n            </div>\r\n        </UserContext.Provider>\r\n         \r\n        </BrowserRouter>\r\n    \r\n    \r\n    </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\Home.js",["73","74","75","76","77","78","79","80","81","82"],"import React, {useEffect, useState, useContext} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport UserContext from \"../../context/UserContext\";\r\nimport axios from 'axios';\r\nimport * as f from \"react-bootstrap\";\r\n\r\n\r\nimport \"../../style.css\";\r\n\r\n\r\n\r\nexport default function Testing() {\r\n    //set states\r\n    const [posts, setPosts] = useState([]); //all the existing data in DB, used mainly for inits\r\n    const [loading, setLoading] = useState(false); //default to false, we mannually change it when fetching data\r\n    const [currentPage, setCurrentPage] = useState(1); //current page showing, default at 1st page\r\n    const [postsPerPage, setPostsPerPage] = useState(5); //10 samples per page \r\n    const [postToBeRemoved, setPostToBeRemoved] = useState(''); //for header purposes on delete\r\n    const [keyword, setKeyword] = useState();\r\n    const [postsNotDefault, setPostsNotDefault] = useState([]); //commonly updated to suit every feature's needs\r\n    const [show, setShow] = useState(false);//for alert window to show/hide\r\n    const [showUpdate, setShowUpdate] = useState(true); //state for showing submit button for editing purposes\r\n    //these are the temp states for the update feature\r\n    const [tempTitle, setTempTitle] = useState('');\r\n    const [tempDescription, setTempDescription] = useState('');\r\n    const [tempIdentifier, setTempIdentifier] = useState('');\r\n    const [tempKeyword, setTempKeyword] = useState('');\r\n    const [error, setError] = useState(); //error handling\r\n\r\n    //stylings\r\n    const BarStyling = {width:\"180px\",background:\"#F2F1F9\", border:\"none\", padding:\"0.3rem\"};//styling for searchBar\r\n    const OptionStyling = {width: \"20px\"};\r\n    const loadingStyle={color: \"white\"};\r\n    const columnStyling = {height: \"50px\"};\r\n\r\n    \r\n    \r\n    useEffect(() => {\r\n        const fetchPosts = async () => {\r\n        setLoading(true);\r\n        const res = await axios.get('http://localhost:5000/ont/ontologyList'); //get all ontologies\r\n        setPosts(res.data); //update state\r\n        setPostsNotDefault(res.data); //update this state too, if searchbar is empty: posts=postsNonDefault\r\n        setLoading(false);\r\n        };\r\n\r\n        fetchPosts();\r\n    }, []); //no dependencies, otherwise we'll be in an endless loop\r\n    console.log(posts); //not actually necessary, for testing/debugging purposes\r\n\r\n    //get indexes and current posts shown\r\n    const indexOfLastPost = currentPage * postsPerPage; //index of last ontology entry shown\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage; //index of first ontology entry shown\r\n    let currentPosts = postsNotDefault.slice(indexOfFirstPost, indexOfLastPost); //current posts shown, sliced between 1st and last index\r\n    \r\n\r\n\r\n    const pageNumber = []; \r\n    for(let i=1; i<= Math.ceil(postsNotDefault.length/postsPerPage); i++){ //we round up the division\r\n        pageNumber.push(i); //this determines how many pages of items will be \r\n    }\r\n\r\n    //change page\r\n    const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n    \r\n    \r\n\r\n    const DeleteOnt = async () => {\r\n\r\n        const res = await axios.delete(\"http://localhost:5000/ont/ontologyRemove/\", {\r\n            params: { _id: postToBeRemoved }, headers:{ \"to-be-removed\" : postToBeRemoved}});\r\n\r\n        const postsLeft = posts.filter(item => item._id !== postToBeRemoved);\r\n        console.log(postsLeft);\r\n        setPosts(postsLeft);\r\n        //the next happens so delete can concurrently work with sort+search and render the correct things\r\n        const postsLeftToShown = postsNotDefault.filter(item => item._id !== postToBeRemoved); \r\n        setPostsNotDefault(postsLeftToShown); //update state\r\n        setCurrentPage(1); //redirect to first page again\r\n        setShow(false); //close alert window\r\n        setPostToBeRemoved(''); //delete the stored _id\r\n\r\n    };\r\n\r\n    const [idisSearching, setIdisSearching] = useState(false); //flag for double search\r\n    const [keywordisSearching, setKeywordisSearching] = useState(false);//flag for double search\r\n    const [doubleSearch,setDoubleSearch] = useState([]); //results for double searching criteria\r\n    const [keywordRes,setKeywordRes] = useState([]); //states for 2->1  searching critiria handling\r\n    const [idRes,setIdRes] = useState([]);\r\n    \r\n\r\n    const updateInput = async (input) => {\r\n        \r\n        if(input){\r\n            setKeywordisSearching(true);\r\n            if(!idisSearching) { //nothing on ID searchBar\r\n            const filtered = posts.filter(post => { //filter posts based on input of searchbar\r\n             return post.keyword.toLowerCase().includes(input.toLowerCase()) //works for all typos, upper/lower case, all converted\r\n            })\r\n            setKeywordRes(filtered);\r\n            setDoubleSearch(filtered); //for the double searching case\r\n            setPostsNotDefault(filtered); //update state  \r\n            setCurrentPage(1); //we go back to 1st page to prevent bad UI misconseptions\r\n            } else {\r\n                const filtered = doubleSearch.filter(post => { //filter posts based on input of searchbar\r\n                    return post.keyword.toLowerCase().includes(input.toLowerCase()) //works for all typos, upper/lower case, all converted\r\n                })\r\n                setPostsNotDefault(filtered);\r\n                \r\n                \r\n            }\r\n            }\r\n            else{\r\n                setKeywordisSearching(false);\r\n                if(!idisSearching){\r\n                setPostsNotDefault(posts); //if empty, that means postsNotDefault=posts\r\n                }else{\r\n                    setPostsNotDefault(idRes);\r\n                }\r\n            }\r\n         }\r\n\r\n     const updateInput2 = async (input) => {\r\n        if(input){\r\n        setIdisSearching(true);\r\n        if(!keywordisSearching) { //nothing on keword searchBar\r\n        const filtered = posts.filter(post => { //filter posts based on input of searchbar\r\n         return post.id.toLowerCase().includes(input.toLowerCase()) //works for all typos, upper/lower case, all converted\r\n        })\r\n        setIdRes(filtered);\r\n        setDoubleSearch(filtered); //for the double searching case\r\n        setPostsNotDefault(filtered); //update state\r\n        \r\n        setCurrentPage(1); //we go back to 1st page to prevent bad UI misconseptions\r\n        } else {\r\n            const filtered = doubleSearch.filter(post => { //filter posts based on input of searchbar\r\n                return post.id.toLowerCase().includes(input.toLowerCase()) //works for all typos, upper/lower case, all converted\r\n            })\r\n            \r\n            setPostsNotDefault(filtered);\r\n            \r\n            \r\n        }\r\n        }\r\n        else{\r\n            setIdisSearching(false);\r\n            if(!keywordisSearching){\r\n            setPostsNotDefault(posts); //if empty, that means postsNotDefault=posts\r\n            }else{\r\n                setPostsNotDefault(keywordRes);\r\n            }\r\n        }\r\n     }\r\n  \r\n   \r\n       \r\n    \r\n    //if you're not logged in, home page automatically redirects you to login page\r\n    const {userData} = useContext(UserContext);\r\n    const history = useHistory();\r\n    \r\n    useEffect(() => { //if there's not a user logged in, redirect to login page \r\n        if(!userData.user) history.push(\"/login\");\r\n    },);//now we dont even have depend param(the []), because when u log out, it doesnt redirect u to log in page. Now it does\r\n    \r\n    const OpenAlert = async (_id) => { //opens alert window and updates state for deletion\r\n        setShow(true);\r\n        setPostToBeRemoved(_id);\r\n        window.scrollTo(0, 0) \r\n    }\r\n\r\n    const UpdatePreperations = () => { //when gear button is clicked, table becomes editable and submit button shows up\r\n        setShowUpdate(false);\r\n    }\r\n\r\n    const UpdateOntology = async (e, id) => {\r\n        try{\r\n            const updatedOntology = {id, tempTitle, tempDescription, tempIdentifier, tempKeyword}; //not needed\r\n            const res = await axios.put(\"http://localhost:5000/ont/ontologyUpdate/\", \r\n                {\r\n                    id: id,\r\n                    title: tempTitle,\r\n                    description: tempDescription,\r\n                    identifier: tempIdentifier,\r\n                    keyword: tempKeyword\r\n\r\n                }, );\r\n            //we hide again both input fields and submit button\r\n            setShowUpdate(true); \r\n            setCurrentPage(1); //redirect to 1st page\r\n        } \r\n        catch(err) { //if there's an error we catch it\r\n        err.response.data.msg && setError(err.response.data.msg); //if both are true, error state is update with the error message that shows up\r\n    }\r\n        \r\n    }\r\n\r\n    //BEWARE, BOTH SORTINGS ARE CASE SENSITIVE\r\n    const sortDataAsc = async (field) => {\r\n        console.log(field);\r\n        const types = {\r\n            id: 'id',\r\n            keyword: 'keyword'\r\n          };\r\n          const sortProperty = types[field];\r\n          console.log(sortProperty);\r\n        const sorted = [...postsNotDefault].sort(function(a,b){\r\n        if(a[sortProperty] < b[sortProperty]) { return -1; }\r\n        if(a[sortProperty] > b[sortProperty]) { return 1; }\r\n        });\r\n        setPostsNotDefault(sorted);\r\n    }\r\n   \r\n    const sortDataDesc = async (field) => {\r\n        console.log(field);\r\n        const types = { \r\n            id: 'id',\r\n            keyword: 'keyword'   \r\n          };\r\n          const sortProperty = types[field];\r\n          console.log(sortProperty);\r\n        const sorted = [...postsNotDefault].sort(function(a,b){\r\n        if(a[sortProperty] < b[sortProperty]) { return 1; }\r\n        if(a[sortProperty] > b[sortProperty]) { return -1; }\r\n        });\r\n        setPostsNotDefault(sorted);\r\n    }\r\n    \r\n    function ShowMore({ children, maxCharacterCount = 100}) { //truncating description\r\n        const text = children;\r\n        const [isTruncated,setIsTruncated] = useState(true);\r\n        //if isTruncated is true, we slice, otherwise we show the full string\r\n        const resultString = isTruncated? text.slice(0,100) : text; //breakpoint is at 100 characters\r\n\r\n        function toggleIsTruncated(){\r\n            //update state with the opposite boolean, so we can have correct toggle\r\n            setIsTruncated(!isTruncated);\r\n        }\r\n\r\n\r\n        if(text.length > 100){\r\n        return (\r\n            <p>\r\n                {resultString}\r\n                <br></br> {/*line break for CSS reasons */}\r\n                <span onClick={toggleIsTruncated} className=\"truncated\">\r\n                    {isTruncated ? \"Show more\" : \"Show less\"}\r\n                </span>\r\n            </p>\r\n\r\n        );\r\n        } else {\r\n            return (\r\n                <p>{text}</p>\r\n            );\r\n        }\r\n    }\r\n    \r\n\r\n\r\n\r\n    \r\n    if(loading){\r\n        return <h2 style={loadingStyle}>Loading...</h2>;\r\n    } //if fetching data is not completed, loading title shows up until it's done\r\n    \r\n    \r\n    \r\n    return (\r\n         \r\n        <div className=\"MainPage\">\r\n            \r\n            <f.Alert show={show} variant=\"danger\" onClose={() => setShow(false)} dismissible> {/*Show alert when some1 tries to delete */}\r\n        <f.Alert.Heading>Warning!</f.Alert.Heading>\r\n        <p>\r\n          Are you sure you want to delete this Ontology? This action is not reversable.\r\n        </p>\r\n        <hr />\r\n        <div className=\"d-flex justify-content-end\">\r\n          <f.Button onClick={() => DeleteOnt()} variant=\"outline-success\">\r\n            Delete Ontology\r\n          </f.Button>\r\n        </div>\r\n      </f.Alert> \r\n    \r\n            <h1 className=\"text-primary mb-3\">Ontology List</h1>\r\n            <f.Table table table-bordered table-hover table-sm responsive > \r\n            \r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\" >id     \r\n                        <button className=\"sorting_buttons\"><i class=\"fa fa-sort-desc\" onClick={(e) =>sortDataAsc('id')}></i></button>\r\n                        <button className=\"sorting_buttons\"><i class=\"fa fa-sort-asc\" onClick={(e) => sortDataDesc('id')}></i></button></th>\r\n                    <th scope=\"col\" >title</th>\r\n                    <th scope=\"col\" >description</th>\r\n                    <th scope=\"col\" >identifier</th>\r\n                    <th scope=\"col\" style={columnStyling}>keyword\r\n                        <div className=\"box\">\r\n                        <button className=\"sorting_buttons\"><i class=\"fa fa-sort-desc\" onClick={(e) =>sortDataAsc('keyword')}></i></button>\r\n                        <button className=\"sorting_buttons\"><i class=\"fa fa-sort-asc\" onClick={(e) => sortDataDesc('keyword')}></i></button></div></th>\r\n                        \r\n                    <th scope=\"col\" style={OptionStyling}>options</th>           \r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                <input style={BarStyling} key=\"random2\" value={keyword} placeholder={\"search ID\"} onChange={(e) => updateInput2(e.target.value)}/>\r\n                <th></th>\r\n                <th></th>\r\n                <th></th>\r\n                <input style={BarStyling} key=\"random1\" value={keyword} placeholder={\"search keyword\"} onChange={(e) => updateInput(e.target.value)}/>\r\n                </tr> \r\n            {currentPosts.map(post => (\r\n                <tr> {/*display the fetched data in corresponding table position */}\r\n                    <td >{post.id}</td> {/*ID doesnt get editable, cuz its a unique param and doesnt change */}\r\n                    <td><input type=\"text\" hidden={showUpdate} onChange={(e) => setTempTitle(e.target.value)} />{post.title}</td>\r\n                    <td><input type=\"text\" hidden={showUpdate} onChange={(e) => setTempDescription(e.target.value)} /><ShowMore>{post.description}</ShowMore></td>\r\n                    <td><input type=\"text\" hidden={showUpdate} onChange={(e) => setTempIdentifier(e.target.value)} /><a href={post.identifier} target=\"_blank\"  rel=\"noopener noreferrer\">{post.identifier}</a></td>\r\n                    <td><input type=\"text\" hidden={showUpdate} onChange={(e) => setTempKeyword(e.target.value)} />{post.keyword}</td>\r\n                    <td style={OptionStyling}>\r\n                        <div className=\"options\">\r\n                        <button class=\"btn\" onClick={(e) => OpenAlert(post._id)}><i class=\"fa fa-trash\"></i></button>{/*needs center alignment. Opens alert popup window */}\r\n                        <button class=\"btn\" ><i class=\"fa fa-gear\" onClick={(e) => UpdatePreperations()} ></i></button> {/*show input fields and submit button */}\r\n                        <button class=\"btn\" hidden={showUpdate} onClick={(e) => UpdateOntology(e, post.id)}>Submit</button> {/*This button will only show when we editing something*/}\r\n                        </div>\r\n                    </td> \r\n                </tr>\r\n                ))}\r\n            </tbody>\r\n            \r\n          \r\n        </f.Table>\r\n        <nav className=\"endPage\">\r\n            <ul className=\"pagination\">\r\n                <li className=\"page-item \">\r\n                    <a onClick={() => paginate(1)} className=\"page-link\" tabIndex=\"1\" href=\"#\">{\"<<\"}</a></li> {/*redirect to first page*/}\r\n                {pageNumber.map(PageNumber =>(\r\n                    <li key={PageNumber} className=\"page-item \" >\r\n                        <a onClick={() => paginate(PageNumber)} class=\"page-link \" tabIndex=\"1\" href=\"#\" >\r\n                            {PageNumber}\r\n                        </a>\r\n                    </li>\r\n                ))}\r\n                <li className=\"page-item\">\r\n                    <a onClick={() => paginate(pageNumber.length)} className=\"page-link\" tabIndex=\"1\" href=\"#\">{\">>\"}</a></li> {/*redirect to last page*/}\r\n\r\n            </ul> \r\n        </nav>\r\n             <button type=\"button\" class=\"btn btn-secondary\" onClick={() => { history.push('/ontregister') }}>Add new ontology</button>\r\n             <div className=\"test\">\r\n             <f.Dropdown> {/*User dynamically changes how many posts shown per page */}\r\n  <f.Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\" >\r\n    {postsPerPage}\r\n  </f.Dropdown.Toggle>\r\n\r\n  <f.Dropdown.Menu >\r\n    <f.Dropdown.Item onClick={() => { setPostsPerPage(5); setCurrentPage(1);}}>5</f.Dropdown.Item>\r\n    <f.Dropdown.Item onClick={() => { setPostsPerPage(10); setCurrentPage(1);}} >10</f.Dropdown.Item>\r\n    <f.Dropdown.Item onClick={() => { setPostsPerPage(20); setCurrentPage(1);}}>20</f.Dropdown.Item>\r\n  </f.Dropdown.Menu>\r\n</f.Dropdown>\r\n</div>\r\n        </div>\r\n    )\r\n    \r\n}","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\Login.js",[],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\Register.js",[],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\layout\\Header.js",["83"],"import React, {useContext} from \"react\";\r\nimport {Link} from \"react-router-dom\"; //the a tag doesnt interact with react-router, so we use this\r\nimport AuthOptions from \"../auth/AuthOptions\";\r\nimport UserContext from \"../../context/UserContext\";\r\n\r\n\r\nexport default function Header() {\r\n    const {userData, setUserData} = useContext(UserContext);\r\n\r\n    if(!userData.user){\r\n        return (\r\n            <header id=\"header\">\r\n                <Link to=\"/login\" style={{textDecoration:'none'}}><h1 className=\"title\">Ψηφιακή Βιβλιοθήκη Μαθησιακών Αντικειμένων</h1></Link>\r\n                <AuthOptions/>\r\n            </header>\r\n        )\r\n    }else{\r\n        if(userData.user.isAdmin){\r\n            return (\r\n        \r\n                <header id=\"header\">\r\n                    <Link to=\"/\" style={{textDecoration:'none'}}><h1 className=\"title\">Ψηφιακή Βιβλιοθήκη Μαθησιακών Αντικειμένων</h1></Link>\r\n                    <AuthOptions/>\r\n                </header>\r\n            )\r\n        }else{\r\n            return (\r\n        \r\n                <header id=\"header\">\r\n                    <Link to=\"/user-dash\" style={{textDecoration:'none'}}><h1 className=\"title\">Ψηφιακή Βιβλιοθήκη Μαθησιακών Αντικειμένων</h1></Link>\r\n                    <AuthOptions/>\r\n                </header>\r\n            )\r\n        }\r\n    }\r\n    \r\n}","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\AuthOptions.js",[],["84","85"],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\context\\UserContext.js",[],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\ErrorNotice.js",[],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\OntRegister.js",[],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\testing.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\auth\\AuthDelete.js",["106","107"],"import React from \"react\"; \r\nimport axios from 'axios';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport default function AuthDelete(){\r\n    return (\r\n        <div>Hiiii</div>\r\n    );\r\n}","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\FileUpload.js",["108"],"import Axios from \"axios\";\r\nimport React, {useState} from \"react\";\r\n\r\n\r\n\r\nexport default function FileUpload() {\r\n    //set the states\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [progress, setProgress] = useState(0);\r\n    const [message, setMessage] = useState('');\r\n    const [error, setError] = useState();\r\n\r\n\r\n\r\n\r\nconst selectFile = (e) => {\r\n    setSelectedFiles(e.target.files);\r\n};\r\n\r\n\r\nconst upload = async () => {\r\n  let currentFile = selectedFiles[0];\r\n  setProgress(0);\r\n  setCurrentFile(currentFile);\r\n  \r\n  try{\r\n    \r\n  const res = await Axios.post(\"http://localhost:5000/ont/ontologySubmit\", currentFile , {\r\n    headers : {\r\n      'Content-Type': 'application/json'\r\n    }\r\n    \r\n  });\r\n  console.log(res.data);\r\n  setProgress(100);\r\n  setMessage(\"Upload successful!\");\r\n}\r\n catch(err){\r\n    err.response.data.msg && setError(err.response.data.msg);\r\n    setMessage(\"error, upload failed.\");\r\n    setProgress(0);\r\n    setCurrentFile(undefined);\r\n}\r\nsetSelectedFiles(undefined);  //once upload is complete,we update state to prepare for the next upload\r\n};\r\nreturn (\r\n    <div>\r\n      {currentFile && (\r\n        <div className=\"progress\">\r\n          <div\r\n            className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n            role=\"progressbar\"\r\n            aria-valuenow={progress}\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            style={{ width: progress + \"%\" }}\r\n          >\r\n            {progress}%\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <label className=\"btn btn-default\">\r\n        <input type=\"file\" accept=\".json\" onChange={selectFile} />\r\n      </label>\r\n\r\n      <button\r\n        className=\"btn btn-success\"\r\n        disabled={!selectedFiles}\r\n        onClick={upload}\r\n      >\r\n        Upload\r\n      </button>\r\n\r\n      <div className=\"alert alert-light\" role=\"alert\">\r\n        {message}\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  );\r\n\r\n}","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\misc\\ScrollButton.js",["109"],"import React,{useState} from \"react\";\r\nimport \"./../../style.css\";\r\n\r\nexport default function ScrollButton() {\r\n  \r\n        const [visible, setVisible] = useState(false)\r\n\r\n        const imgStyle = {color: \"white\"};\r\n        \r\n        const toggleVisible = () => {\r\n          const scrolled = document.documentElement.scrollTop;\r\n          if (scrolled > 300){\r\n            setVisible(true)\r\n          } \r\n          else if (scrolled <= 300){\r\n            setVisible(false)\r\n          }\r\n        };\r\n        \r\n        const scrollToTop = () =>{\r\n          window.scrollTo({\r\n            top: 0, \r\n            behavior: 'smooth'\r\n          });\r\n        };\r\n        \r\n        window.addEventListener('scroll', toggleVisible);\r\n\r\n        return (\r\n            \r\n            <button className=\"go-to-top\" onClick={scrollToTop} \r\n            style={{display: visible ? 'inline' : 'none'}}>\r\n             <i class=\"fa fa-arrow-circle-up\" ></i>\r\n            </button>\r\n           \r\n          );\r\n\r\n}","C:\\Users\\DIMITRIS\\Desktop\\CEID Files\\project\\mern-auth-front\\src\\components\\pages\\GuestDashboard.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126"],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":7,"column":8,"nodeType":"133","messageId":"134","endLine":7,"endColumn":12},{"ruleId":"131","severity":1,"message":"135","line":19,"column":21,"nodeType":"133","messageId":"134","endLine":19,"endColumn":31},{"ruleId":"131","severity":1,"message":"136","line":28,"column":12,"nodeType":"133","messageId":"134","endLine":28,"endColumn":17},{"ruleId":"131","severity":1,"message":"137","line":70,"column":15,"nodeType":"133","messageId":"134","endLine":70,"endColumn":18},{"ruleId":"131","severity":1,"message":"138","line":178,"column":19,"nodeType":"133","messageId":"134","endLine":178,"endColumn":34},{"ruleId":"131","severity":1,"message":"137","line":179,"column":19,"nodeType":"133","messageId":"134","endLine":179,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":207,"column":50,"nodeType":"141","messageId":"142","endLine":207,"endColumn":58},{"ruleId":"139","severity":1,"message":"140","line":222,"column":50,"nodeType":"141","messageId":"142","endLine":222,"endColumn":58},{"ruleId":"143","severity":1,"message":"144","line":336,"column":21,"nodeType":"145","endLine":336,"endColumn":96},{"ruleId":"143","severity":1,"message":"144","line":339,"column":25,"nodeType":"145","endLine":339,"endColumn":107},{"ruleId":"143","severity":1,"message":"144","line":345,"column":21,"nodeType":"145","endLine":345,"endColumn":112},{"ruleId":"131","severity":1,"message":"146","line":8,"column":22,"nodeType":"133","messageId":"134","endLine":8,"endColumn":33},{"ruleId":"127","replacedBy":"147"},{"ruleId":"129","replacedBy":"148"},{"ruleId":"131","severity":1,"message":"135","line":22,"column":21,"nodeType":"133","messageId":"134","endLine":22,"endColumn":31},{"ruleId":"131","severity":1,"message":"137","line":89,"column":15,"nodeType":"133","messageId":"134","endLine":89,"endColumn":18},{"ruleId":"131","severity":1,"message":"149","line":115,"column":17,"nodeType":"133","messageId":"134","endLine":115,"endColumn":18},{"ruleId":"131","severity":1,"message":"149","line":133,"column":21,"nodeType":"133","messageId":"134","endLine":133,"endColumn":22},{"ruleId":"131","severity":1,"message":"149","line":151,"column":17,"nodeType":"133","messageId":"134","endLine":151,"endColumn":18},{"ruleId":"139","severity":1,"message":"150","line":173,"column":59,"nodeType":"151","messageId":"142","endLine":173,"endColumn":61},{"ruleId":"139","severity":1,"message":"140","line":259,"column":50,"nodeType":"141","messageId":"142","endLine":259,"endColumn":58},{"ruleId":"139","severity":1,"message":"140","line":276,"column":50,"nodeType":"141","messageId":"142","endLine":276,"endColumn":58},{"ruleId":"139","severity":1,"message":"140","line":291,"column":36,"nodeType":"141","messageId":"142","endLine":291,"endColumn":44},{"ruleId":"139","severity":1,"message":"140","line":308,"column":36,"nodeType":"141","messageId":"142","endLine":308,"endColumn":44},{"ruleId":"131","severity":1,"message":"137","line":372,"column":23,"nodeType":"133","messageId":"134","endLine":372,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":421,"column":37,"nodeType":"154","messageId":"155","endLine":421,"endColumn":39},{"ruleId":"131","severity":1,"message":"137","line":430,"column":23,"nodeType":"133","messageId":"134","endLine":430,"endColumn":26},{"ruleId":"131","severity":1,"message":"137","line":519,"column":23,"nodeType":"133","messageId":"134","endLine":519,"endColumn":26},{"ruleId":"143","severity":1,"message":"144","line":689,"column":21,"nodeType":"145","endLine":689,"endColumn":98},{"ruleId":"143","severity":1,"message":"144","line":692,"column":25,"nodeType":"145","endLine":692,"endColumn":109},{"ruleId":"143","severity":1,"message":"144","line":698,"column":21,"nodeType":"145","endLine":698,"endColumn":116},{"ruleId":"143","severity":1,"message":"144","line":784,"column":21,"nodeType":"145","endLine":784,"endColumn":96},{"ruleId":"143","severity":1,"message":"144","line":787,"column":25,"nodeType":"145","endLine":787,"endColumn":107},{"ruleId":"143","severity":1,"message":"144","line":793,"column":21,"nodeType":"145","endLine":793,"endColumn":112},{"ruleId":"131","severity":1,"message":"156","line":2,"column":8,"nodeType":"133","messageId":"134","endLine":2,"endColumn":13},{"ruleId":"131","severity":1,"message":"157","line":3,"column":9,"nodeType":"133","messageId":"134","endLine":3,"endColumn":19},{"ruleId":"131","severity":1,"message":"136","line":12,"column":12,"nodeType":"133","messageId":"134","endLine":12,"endColumn":17},{"ruleId":"131","severity":1,"message":"158","line":8,"column":15,"nodeType":"133","messageId":"134","endLine":8,"endColumn":23},{"ruleId":"131","severity":1,"message":"135","line":19,"column":21,"nodeType":"133","messageId":"134","endLine":19,"endColumn":31},{"ruleId":"131","severity":1,"message":"136","line":21,"column":12,"nodeType":"133","messageId":"134","endLine":21,"endColumn":17},{"ruleId":"131","severity":1,"message":"159","line":21,"column":19,"nodeType":"133","messageId":"134","endLine":21,"endColumn":27},{"ruleId":"131","severity":1,"message":"149","line":91,"column":17,"nodeType":"133","messageId":"134","endLine":91,"endColumn":18},{"ruleId":"131","severity":1,"message":"149","line":109,"column":21,"nodeType":"133","messageId":"134","endLine":109,"endColumn":22},{"ruleId":"131","severity":1,"message":"149","line":127,"column":17,"nodeType":"133","messageId":"134","endLine":127,"endColumn":18},{"ruleId":"139","severity":1,"message":"150","line":149,"column":59,"nodeType":"151","messageId":"142","endLine":149,"endColumn":61},{"ruleId":"139","severity":1,"message":"140","line":231,"column":50,"nodeType":"141","messageId":"142","endLine":231,"endColumn":58},{"ruleId":"139","severity":1,"message":"140","line":248,"column":50,"nodeType":"141","messageId":"142","endLine":248,"endColumn":58},{"ruleId":"139","severity":1,"message":"140","line":263,"column":36,"nodeType":"141","messageId":"142","endLine":263,"endColumn":44},{"ruleId":"139","severity":1,"message":"140","line":280,"column":36,"nodeType":"141","messageId":"142","endLine":280,"endColumn":44},{"ruleId":"143","severity":1,"message":"144","line":449,"column":21,"nodeType":"145","endLine":449,"endColumn":98},{"ruleId":"143","severity":1,"message":"144","line":452,"column":25,"nodeType":"145","endLine":452,"endColumn":109},{"ruleId":"143","severity":1,"message":"144","line":458,"column":21,"nodeType":"145","endLine":458,"endColumn":116},{"ruleId":"143","severity":1,"message":"144","line":535,"column":21,"nodeType":"145","endLine":535,"endColumn":96},{"ruleId":"143","severity":1,"message":"144","line":538,"column":25,"nodeType":"145","endLine":538,"endColumn":107},{"ruleId":"143","severity":1,"message":"144","line":544,"column":21,"nodeType":"145","endLine":544,"endColumn":112},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'setKeyword' is assigned a value but never used.","'error' is assigned a value but never used.","'res' is assigned a value but never used.","'updatedOntology' is assigned a value but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setUserData' is assigned a value but never used.",["160"],["161"],"'x' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axios' is defined but never used.","'useHistory' is defined but never used.","'imgStyle' is assigned a value but never used.","'setError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]